{"version":3,"sources":["components/card/cardComp.jsx","components/card-list/car-listComp.jsx","components/searchBox/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Searchbox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAO,SAAAC,GAAK,OAEzB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAK,IAA7C,4BAClB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJTC,EAAW,SAAAR,GAAK,OAErB,qBAAKC,UAAW,YAAhB,SACDD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC7B,cAAC,EAAD,CACIA,QAASA,GADDA,EAAQC,UCLXM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEzB,uBAAOZ,UAAW,SACda,KAAM,SACNF,YAAeA,EACfG,SAAYF,MC8BDG,G,wDAhCb,aAAe,IAAD,8BACZ,gBACKC,MAAO,CACVR,SAAU,GACVS,YAAa,IAJH,E,qDAOhB,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAGzC,WAAU,IAAD,OACP,EAAiCE,KAAKR,MAA/BR,EAAP,EAAOA,SAAWS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAC/CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK3B,UAAU,MAAf,UACA,kDACC,cAAC,EAAD,CACDW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAU,CAACN,YAAcY,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CACAvB,SAAYiB,W,GA3BEO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fbbc96d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cardComp.styles.css\";\r\n\r\nexport const Card = props =>\r\n(\r\n<div className = \"card-container\">\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id + 500}?set=set2&size=180x180`} />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n</div>\r\n)\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\"\r\nimport {Card} from \"../card/cardComp\"\r\n\r\nexport const CardList = props => (\r\n    \r\n        <div className= \"card-list\">\r\n      {props.monsters.map(monster => (\r\n    <Card key ={monster.id} \r\n        monster={monster}\r\n    />  \r\n     ))}\r\n     </div>\r\n    \r\n);","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const Searchbox = ({placeholder,handleChange}) => (\r\n \r\n<input className =\"search\"\r\n    type =\"search\"\r\n    placeholder = {placeholder}\r\n    onChange = {handleChange} />\r\n);","import React, {Component} from \"react\";\nimport {CardList} from \"./components/card-list/car-listComp.jsx\"\nimport {Searchbox} from \"./components/searchBox/search-box\"\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state ={\n      monsters: [],\n      searchField: ''\n    }\n  }\ncomponentDidMount(){\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(response => response.json())\n  .then(users => this.setState({monsters:users}));\n}\n\nrender() {\n  const {monsters , searchField} = this.state;\n  const filteredMonsters = monsters.filter( monster =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n     <Searchbox\n    placeholder=\"search monsters\"\n    handleChange={e => this.setState ({searchField : e.target.value})} />\n\n    <CardList \n    monsters = {filteredMonsters} \n    />\n     </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}